# Import necessary modules
Import-Module Az.Accounts
Import-Module Az.KeyVault
Import-Module Az.Resources

# Disable context autosave
Disable-AzContextAutoSave -Scope Process | Out-Null

# Variables
$subscriptionId="239f5924-8e6f-478e-aa36-6e4509de3b5f"  #<your subscriptionID)
$expiryThresholdDays=15 #(This will tell us the secrets expiring in next 15Days from the time of runnin this script)
$sendGridApiKey = "your-sendgrid-api-key"
$toEmailAddress = "recipient@example.com"
$fromEmailAddress = "sender@example.com"

# Authenticate to Azure using managed identity
$AzureContext = Connect-AzAccount -Identity
if (-not $AzureContext) {
    throw "Failed to connect to Azure with managed identity."
}

# Set the subscription context
Set-AzContext -SubscriptionId $subscriptionId
$currentContext = Get-AzContext
if ($currentContext.Subscription.Id -ne $subscriptionId) {
    throw "Failed to set the Azure context to the specified subscription."
}

# Current date and threshold date
$currentDate = Get-Date
$thresholdDate = $currentDate.AddDays($expiryThresholdDays)

# Get all Key Vaults in the subscription
$keyVaults = Get-AzKeyVault
if (-not $keyVaults) {
    throw "No Key Vaults found in the subscription."
}

# Initialize variables to store alert messages
$expiredSecretsMessage = "Expired Secrets:`n"
$expiringSecretsMessage = "Secrets Expiring in Near Future:`n"
$expiredFound = $false
$expiringFound = $false

# Check each Key Vault for secrets
foreach ($keyVault in $keyVaults) {
    $keyVaultName = $keyVault.VaultName

    # Get secrets in the Key Vault
    $secrets = Get-AzKeyVaultSecret -VaultName $keyVaultName

    foreach ($secret in $secrets) {
        # Check secret expiration
        if ($secret.Attributes.Expires -ne $null) {
            if ($secret.Attributes.Expires -lt $currentDate) {
                $daysSinceExpiry = ($currentDate - $secret.Attributes.Expires).Days
                $message = "The secret '$($secret.Name)' in Key Vault '$keyVaultName' expired $daysSinceExpiry days ago. Its expiry date was $($secret.Attributes.Expires)."
                Write-Output $message
                $expiredSecretsMessage += "$message`n"
                $expiredFound = $true
            }
            elseif ($secret.Attributes.Expires -lt $thresholdDate) {
                $daysLeft = ($secret.Attributes.Expires - $currentDate).Days
                $message = "The secret '$($secret.Name)' in Key Vault '$keyVaultName' is expiring in $daysLeft days. Its expiry date is $($secret.Attributes.Expires)."
                Write-Output $message
                $expiringSecretsMessage += "$message`n"
                $expiringFound = $true
            }
        }
    }
}

# If there are any expired or expiring secrets, send an email notification using SendGrid
if ($expiredFound -or $expiringFound) {
    $alertMessage = ""
    if ($expiredFound) {
        $alertMessage += "$expiredSecretsMessage`n"
    }
    if ($expiringFound) {
        $alertMessage += "$expiringSecretsMessage`n"
    }

    $subject = "Azure Key Vault Secret Expiry Alert"
    $body = $alertMessage

    $sendGridUri = "https://api.sendgrid.com/v3/mail/send"

    # List of recipients
    $recipients = @(
        @{ email = "recipient1@example.com" },
        @{ email = "recipient2@example.com" },
        @{ email = "recipient3@example.com" },
        @{ email = "recipient4@example.com" },
        @{ email = "recipient5@example.com" }
    )

    $emailContent = @{
        personalizations = @(@{
            to = $recipients
        })
        from = @{
            email = $fromEmailAddress
        }
        subject = $subject
        content = @(@{
            type = "text/plain"
            value = $body
        })
    } | ConvertTo-Json -Depth 4

    Invoke-RestMethod -Uri $sendGridUri -Method Post -Headers @{
        "Authorization" = "Bearer $sendGridApiKey"
        "Content-Type" = "application/json"
    } -Body $emailContent
}
